# Todo list
- priority
	+ graphene must go, it's using libgobject and causing a bunch of leaks
		= replaced with linmath.h
- init code
	+ seperate GL and GLFW
	- resolution and fullscreen settings
- objects
	+ make objects for these things
		+ camera
		+ light
		+ mpv
	? rework rotations
	= obj:
		= position
		= rotation
		= scale
		= momentum
		= anglular momentum

		+ obj make(void);
	= globj:
		= transformation matrix
		+ globj load(obj);
- models
	= ply:
		= vertex
		= normal
		= color
		= index
		= vertex count
		= index count

		+ ply read(file);
			+ make properties optional
			- calculate normals
				? not sure if here or in prep
		- void free(ply);
	= mdl:
		= model
			= vertex
			= normal
			= color
		= index
		= vertex count
		= index count

		+ mdl prep(ply);
			- calculate normals for outline
		- void free(mdl);
	= glmdl:
		= model
			- seperate face and outline normals
		= element array
		= attribute array

		+ glmdl load(mdl);
		- void unload(glmdl)
		- void draw(glmdl, globj, program);
			- draws on screen
	= seq
		- figure this shit out;
	- figure out materials
		- UV mapped color palette texture
		+ material properties
			= vec3 defining how shadows look
- artstyle
	+ vertex lighting
		+ cell shading
	+ outlines
		+ inverted hull
		- same thickness for distant objects
		+ shader inputs
		- calculate normals for outline
			? compute shader
- shaders
	- vert
	- frag
		+ material properties
	- outline
		+ shader inputs
			+ color
	- inverted hull
		- same thickness for distant objects
		+ shader inputs
			+ thickness
- image loading
	- choose library
		? stb_image.h
+ antialiasing
	- settings
- input
	+ callback
	- mapping
	- handling
- settings
	+ xdg config
	- config loading
	- setting storage
- threads
	- render thread
	- logic thread
+ clean up header includes
	- do it again
+ clean up makefile
